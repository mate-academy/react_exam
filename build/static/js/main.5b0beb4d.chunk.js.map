{"version":3,"sources":["redux/action.js","redux/reducer.js","components/AuthorList.js","components/AuthorListHandler.js","App.js","serviceWorker.js","index.js"],"names":["REMOVE_ITEM","LOAD_ITEMS","MOVE_DOWN","MOVE_UP","SELECT_INDEX","EDIT_ITEM","DISPLAY","CHANGE_EDIT_MODE","loadAction","dispatch","type","xhr","XMLHttpRequest","open","responseType","addEventListener","items","response","display","send","initalState","listAuthor","indexAuthor","requested","AuthorList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","liClick","bind","assertThisInitialized","liClicked","_this2","request","react_default","a","createElement","react","list","map","li","index","edit","key","onClick","defaultValue","title","id","onKeyDown","e","target","value","changeTitle","remove","disabled","upAuthor","length","downAuthor","loadItems","Component","AuthorListHandler","connect","state","selectIndexAction","changeEditModeAction","editItemAction","removeItemAction","store","createStore","arguments","undefined","action","objectSpread","item","authors","toConsumableArray","selectedIndex","newAuthors","selectedAuthor","splice","AuthorsUp","selectedIndexUp","newAuthorsUp","_newAuthorsUp$splice","selectedAuthorUp","slicedToArray","filter","applyMiddleware","thunk","App","es","components_AuthorListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b0beb4d.chunk.js","sourcesContent":["export const REMOVE_ITEM = 'remove_item';\r\nexport const LOAD_ITEMS = 'load_items';\r\nexport const MOVE_DOWN = 'move_down';\r\nexport const MOVE_UP = 'move_up';\r\nexport const SELECT_INDEX = 'select_index';\r\nexport const EDIT_ITEM = 'edit_item';\r\nexport const DISPLAY = 'display';\r\nexport const CHANGE_EDIT_MODE = 'change_edit_mode'\r\n\r\nexport function removeItemAction(title) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    title\r\n  }\r\n};\r\n\r\nexport function moveDownAction() {\r\n  return {\r\n    type: MOVE_DOWN\r\n  };\r\n};\r\n\r\nexport function changeEditModeAction(title) {\r\n  return {\r\n    type: CHANGE_EDIT_MODE,\r\n    title\r\n  }\r\n}\r\n\r\nexport function moveUpAction() {\r\n  return {\r\n    type: MOVE_UP\r\n  };\r\n};\r\n\r\nexport function selectIndexAction(index) {\r\n  return {\r\n    type: SELECT_INDEX,\r\n    index\r\n  };\r\n};\r\n\r\nexport function editItemAction(value) {\r\n  return {\r\n    type: EDIT_ITEM,\r\n    value\r\n  };\r\n};\r\n\r\nexport function loadAction() {\r\n  return (dispatch) => {\r\n      dispatch({\r\n          type: LOAD_ITEMS\r\n      });\r\n\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors');\r\n      xhr.responseType = 'json';\r\n      xhr.addEventListener('load', () => {\r\n          const items = xhr.response\r\n          dispatch(display(items));\r\n      });\r\n      xhr.send();\r\n  };\r\n}\r\n\r\nexport function display(items) {\r\n  return {\r\n      type: DISPLAY,\r\n      items\r\n  }\r\n}","import {LOAD_ITEMS, MOVE_DOWN, MOVE_UP, SELECT_INDEX, EDIT_ITEM, DISPLAY, CHANGE_EDIT_MODE, REMOVE_ITEM} from './action';\r\n\r\n\r\nconst initalState = {\r\n  listAuthor: [],\r\n  indexAuthor: null,\r\n  requested: false,\r\n};\r\n\r\nexport function AuthorApp(state = initalState, action) {\r\n  switch(action.type) {\r\n    case LOAD_ITEMS:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      };\r\n    case DISPLAY: {\r\n      return {\r\n        ...state,\r\n        listAuthor: action.items.map(item => {\r\n          return {\r\n            title: item,\r\n            edit: false,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case MOVE_DOWN:\r\n      const authors = [...state.listAuthor];\r\n      const selectedIndex = state.indexAuthor;\r\n      const newAuthors = [...authors];\r\n      const selectedAuthor = newAuthors.splice(selectedIndex, 1);\r\n      newAuthors.splice(selectedIndex + 1, 0, selectedAuthor[0]);\r\n      return {\r\n        ...state,\r\n        listAuthor: newAuthors,\r\n        indexAuthor: selectedIndex + 1\r\n      }\r\n    case MOVE_UP:\r\n        const AuthorsUp = [...state.listAuthor];\r\n        const selectedIndexUp = state.indexAuthor;\r\n  \r\n        const newAuthorsUp = [...AuthorsUp];\r\n        const [selectedAuthorUp] = newAuthorsUp.splice(selectedIndexUp, 1);\r\n        newAuthorsUp.splice(selectedIndexUp - 1, 0, selectedAuthorUp);\r\n        return {\r\n          ...state,\r\n          listAuthor: newAuthorsUp,\r\n          indexAuthor: selectedIndexUp - 1\r\n        };\r\n    case SELECT_INDEX:\r\n      return {\r\n        ...state,\r\n        indexAuthor: action.index\r\n      }\r\n    case EDIT_ITEM: \r\n      return {\r\n        ...state,\r\n        listAuthor: state.listAuthor.map((item, index) => {\r\n          if (index === state.indexAuthor) {\r\n            return {\r\n              title: action.value,\r\n              edit: false,\r\n            };\r\n          } else {\r\n            return item;\r\n          };\r\n        })\r\n      };\r\n    case CHANGE_EDIT_MODE:\r\n      return {\r\n        ...state,\r\n        listAuthor: state.listAuthor.map((item) => {\r\n          if (item.title === action.title) {\r\n            return {\r\n              ...item,\r\n              edit: true,\r\n            };\r\n          } else {\r\n            return item;\r\n          };\r\n        })\r\n      };\r\n    case REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        listAuthor: state.listAuthor.filter(item => item.title !== action.title)\r\n      };\r\n    default:\r\n      return state;\r\n  };\r\n};\r\n\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nexport default class AuthorList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.liClick = this.liClick.bind(this);\r\n  }\r\n\r\n  liClick() {\r\n    return this.props.liClicked\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.request) {\r\n      return (\r\n        <button onClick={this.props.loadItems}>Load</button>\r\n      )\r\n    } else {\r\n        return (\r\n          <Fragment>\r\n            <ul>\r\n              {this.props.list.map((li, index) => {\r\n                if (!li.edit) { \r\n                  return <li key={index} id={li.id} onClick={() => this.props.liClicked(index)}>\r\n                            {li.title}\r\n                            <button onClick={() => this.props.edit(li.title)}> edit</button>\r\n                            <button onClick={() => this.props.remove(li.title)}> remove</button>\r\n                         </li>\r\n                } else {\r\n                    return <li key={index} onClick={() => this.props.liClicked(index)}>\r\n                              <input type=\"text\"  \r\n                                defaultValue={li.title} id={li.id}\r\n                                onKeyDown={(e) => {\r\n                                  if (e.key === 'Enter' && e.target.value !== '') {\r\n                                    this.props.changeTitle(e.target.value);\r\n                                };\r\n                              }}/>\r\n                              <button \r\n                                onClick={() => this.props.remove(li.title)}\r\n                              > remove</button>\r\n                            </li>\r\n                };\r\n              })} \r\n            </ul>\r\n            <button disabled={this.props.index === 0} onClick={this.props.upAuthor}>Author Up</button>\r\n            <button disabled={this.props.index === this.props.list.length - 1} onClick={this.props.downAuthor}>Author Down</button>\r\n          </Fragment>          \r\n        )\r\n    };\r\n  };\r\n};\r\n\r\n\r\n","import {moveDownAction, moveUpAction, editItemAction, loadAction, selectIndexAction, changeEditModeAction, removeItemAction} from '../redux/action';\r\nimport {connect} from \"react-redux\";\r\nimport AuthorList from \"../components/AuthorList\";\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    request: state.requested,\r\n    list: state.listAuthor,\r\n    index: state.indexAuthor\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    loadItems: () => dispatch(loadAction()),\r\n    liClicked: (index) => dispatch(selectIndexAction(index)),\r\n    upAuthor: () => dispatch(moveUpAction()),\r\n    downAuthor: () => dispatch(moveDownAction()),\r\n    edit: (title) => dispatch(changeEditModeAction(title)),\r\n    changeTitle: (value)  => dispatch(editItemAction(value)),\r\n    remove: (title) => dispatch(removeItemAction(title))\r\n  }\r\n}\r\n\r\nconst AuthorListHandler = connect(mapStateToProps, mapDispatchToProps)(AuthorList)\r\n\r\nexport default AuthorListHandler;","import React from 'react';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport {AuthorApp} from './redux/reducer';\r\nimport AuthorListHandler from './components/AuthorListHandler';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(AuthorApp, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n       <AuthorListHandler/>\r\n    </Provider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}