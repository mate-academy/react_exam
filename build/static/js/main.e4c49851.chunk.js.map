{"version":3,"sources":["redux/actions.js","redux/reducer.js","components/Author.js","components/AuthorHandler.js","components/AuthorList.js","components/AuthorListHandler.js","App.js","serviceWorker.js","index.js"],"names":["REQUESTED","DISPLAY_ITEMS","CHOOSE_ITEM","MOVE_UP_ITEM","MOVE_DOWN_ITEM","UPDATE_ITEM","EDIT_ITEM","CHANGE_INPUT_VALUE","REMOVE_ITEM","displayAuthors","payload","type","chooseAuthorItem","moveUpItem","moveDownItem","editItem","updateItem","changeInputValue","removeChosenItem","initialState","authors","inputValue","chosenItemIndex","requested","loadedClothes","isEditItemNow","Author","props","index","className","name","react_default","a","createElement","value","onChange","onKeyPress","onClick","defaultProps","AuthorHandler","connect","state","dispatch","event","key","AuthorList","loadItems","isItemIndex","items","map","item","components_AuthorHandler","disabled","length","AuthorListHandler","xhrAuthors","XMLHttpRequest","open","addEventListener","JSON","parse","response","send","store","createStore","chosenItem","newCopyItems","arguments","undefined","action","Object","objectSpread","slice","splice","join","indexOf","target","trim","applyMiddleware","thunk","App","es","components_AuthorListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4c49851.chunk.js","sourcesContent":["export const REQUESTED = 'requested';\nexport const DISPLAY_ITEMS = 'displayAuthors';\nexport const CHOOSE_ITEM = 'chooseAuthor';\nexport const MOVE_UP_ITEM = 'moveUp';\nexport const MOVE_DOWN_ITEM = 'MoveDown';\nexport const UPDATE_ITEM = 'updateItem';\nexport const EDIT_ITEM = 'editItem';\nexport const CHANGE_INPUT_VALUE = 'changeInputValue';\nexport const REMOVE_ITEM = 'removeItem';\n\nexport function loadItems() {\n  return (dispatch) => {\n    dispatch({\n      type: 'requested',\n    });\n\n    const xhrAuthors = new XMLHttpRequest();\n\n    xhrAuthors.open('GET',\n      '//my-json-server.typicode.com/mate-academy/literary-blog/authors');\n\n    xhrAuthors.addEventListener('load', () => {\n      const payload = {\n        loadedClothes: true,\n        authors: JSON.parse(xhrAuthors.response),\n      };\n\n      dispatch(displayAuthors(payload));\n    });\n\n    xhrAuthors.send();\n  };\n}\n\nexport const displayAuthors = payload => ({\n  type: DISPLAY_ITEMS,\n  payload,\n});\n\nexport const chooseAuthorItem = payload => ({\n  type: CHOOSE_ITEM,\n  payload,\n});\n\nexport const moveUpItem = () => ({\n  type: MOVE_UP_ITEM,\n});\n\nexport const moveDownItem = () => ({\n  type: MOVE_DOWN_ITEM,\n});\n\nexport const editItem = payload => ({\n  type: EDIT_ITEM,\n  payload,\n});\n\nexport const updateItem = payload => ({\n  type: UPDATE_ITEM,\n  payload,\n});\n\nexport const changeInputValue = payload => ({\n  type: CHANGE_INPUT_VALUE,\n  payload,\n});\n\nexport const removeChosenItem = payload => ({\n  type: REMOVE_ITEM,\n  payload,\n});\n","import {\n  REQUESTED,\n  DISPLAY_ITEMS,\n  CHOOSE_ITEM,\n  MOVE_UP_ITEM,\n  MOVE_DOWN_ITEM,\n  EDIT_ITEM,\n  CHANGE_INPUT_VALUE,\n  UPDATE_ITEM,\n  REMOVE_ITEM,\n} from './actions';\n\nconst initialState = {\n  authors: null,\n  inputValue: '',\n  chosenItemIndex: null,\n  requested: false,\n  loadedClothes: false,\n  isEditItemNow: false,\n};\n\nexport default function reducer(state = initialState, action) {\n  let chosenItem;\n  let newCopyItems;\n  switch (action.type) {\n    case REQUESTED:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY_ITEMS:\n      return {\n        ...state,\n        loadedClothes: action.payload.loadedClothes,\n        authors: action.payload.authors,\n      };\n    case CHOOSE_ITEM:\n      return {\n        ...state,\n        chosenItemIndex: action.payload,\n        isEditItemNow: false,\n      };\n    case MOVE_UP_ITEM:\n      newCopyItems = state.authors.slice();\n      chosenItem = newCopyItems.splice(state.chosenItemIndex, 1).join();\n      newCopyItems.splice(state.chosenItemIndex - 1, 0, chosenItem);\n      return {\n        ...state,\n        chosenItemIndex: newCopyItems.indexOf(chosenItem),\n        authors: newCopyItems,\n      };\n    case MOVE_DOWN_ITEM:\n      newCopyItems = state.authors.slice();\n      chosenItem = newCopyItems.splice(state.chosenItemIndex, 1).join();\n      newCopyItems.splice(state.chosenItemIndex + 1, 0, chosenItem);\n      return {\n        ...state,\n        chosenItemIndex: newCopyItems.indexOf(chosenItem),\n        authors: newCopyItems,\n      };\n    case EDIT_ITEM:\n      return {\n        ...state,\n        inputValue: state.authors[action.payload],\n        chosenItemIndex: action.payload,\n        isEditItemNow: true,\n      };\n    case CHANGE_INPUT_VALUE:\n      return {\n        ...state,\n        inputValue: action.payload.target.value,\n      };\n    case UPDATE_ITEM:\n      newCopyItems = state.authors.slice();\n      newCopyItems[state.chosenItemIndex] = state.inputValue;\n      if (state.inputValue.trim() === '') {\n        newCopyItems.splice(state.chosenItemIndex, 1);\n      }\n      return {\n        ...state,\n        authors: newCopyItems,\n        inputValue: '',\n        chosenItemIndex: null,\n        isEditItemNow: false,\n      };\n    case REMOVE_ITEM:\n      newCopyItems = state.authors.slice();\n      newCopyItems.splice(action.payload, 1);\n      return {\n        ...state,\n        authors: newCopyItems,\n        chosenItemIndex: null,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Author(props) {\n  const {\n    isEditItemNow,\n    chosenItemIndex,\n    index,\n    inputValue,\n    changeInputValue,\n    updateItem,\n    removeChosenItem,\n    chooseAuthorItem,\n    className,\n    editItem,\n    name,\n  } = props;\n  if (isEditItemNow && chosenItemIndex === index) {\n    return (\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={changeInputValue}\n        onKeyPress={updateItem}\n      />\n    );\n  }\n  return (\n    <div>\n      <p className=\"item\">\n        <span className=\"delete\" onClick={() => removeChosenItem(index)}>\n          Delete\n        </span>\n        <span onClick={() => chooseAuthorItem(index)} className={className}>\n          {name}\n        </span>\n        <span className=\"edit\" onClick={() => editItem(index)}>Edit</span>\n      </p>\n    </div>\n  );\n}\n\nAuthor.propTypes = {\n  isEditItemNow: PropTypes.bool.isRequired,\n  chosenItemIndex: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  inputValue: PropTypes.string.isRequired,\n  changeInputValue: PropTypes.func.isRequired,\n  updateItem: PropTypes.func.isRequired,\n  removeChosenItem: PropTypes.func.isRequired,\n  chooseAuthorItem: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n  editItem: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nAuthor.defaultProps = {\n  chosenItemIndex: null,\n};\n","import { connect } from 'react-redux';\nimport Author from './Author';\nimport {\n  changeInputValue,\n  chooseAuthorItem,\n  editItem,\n  removeChosenItem,\n  updateItem,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    inputValue: state.inputValue,\n    chosenItemIndex: state.chosenItemIndex,\n    isEditItemNow: state.isEditItemNow,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    chooseAuthorItem: index => dispatch(chooseAuthorItem(index)),\n    changeInputValue: event => dispatch(changeInputValue(event)),\n    editItem: index => dispatch(editItem(index)),\n    updateItem: event => {\n      if (event.key === 'Enter') {\n        dispatch(updateItem());\n      }\n    },\n    removeChosenItem: index => dispatch(removeChosenItem(index)),\n  };\n}\n\nconst AuthorHandler = connect(mapStateToProps, mapDispatchToProps)(Author);\n\nexport default AuthorHandler;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AuthorHandler from './AuthorHandler';\n\nexport function AuthorList(props) {\n  const {\n    requested,\n    loadItems,\n    loadedClothes,\n    chosenItemIndex,\n    authors,\n    isEditItemNow,\n    moveUpItem,\n    moveDownItem,\n  } = props;\n  if (!requested) {\n    return (\n      <input\n        type=\"button\"\n        onClick={loadItems}\n        value=\"Download Authors!\"\n      />\n    );\n  } if (loadedClothes) {\n    const isItemIndex = chosenItemIndex === null;\n    const items = authors.map((item, index) => (\n      <AuthorHandler\n        className={chosenItemIndex === index ? 'selected' : ''}\n        name={item}\n        key={item}\n        index={index}\n      />\n    ));\n\n    return (\n      <section>\n        <div className=\"listItems\">{items}</div>\n        <div>\n          <input\n            disabled={\n              chosenItemIndex === 0\n            || isItemIndex\n            || isEditItemNow\n            }\n            type=\"button\"\n            onClick={moveUpItem}\n            value=\"move Up\"\n          />\n          <input\n            disabled={\n              chosenItemIndex === authors.length - 1\n            || isItemIndex\n            || isEditItemNow\n            }\n            type=\"button\"\n            onClick={moveDownItem}\n            value=\"move Down\"\n          />\n        </div>\n      </section>\n    );\n  }\n  return (\n    <input type=\"button\" disabled value=\"Loading...\" />\n  );\n}\n\nAuthorList.propTypes = {\n  requested: PropTypes.bool.isRequired,\n  loadItems: PropTypes.func.isRequired,\n  loadedClothes: PropTypes.bool.isRequired,\n  chosenItemIndex: PropTypes.number,\n  authors: PropTypes.arrayOf(PropTypes.string),\n  isEditItemNow: PropTypes.bool.isRequired,\n  moveUpItem: PropTypes.func.isRequired,\n  moveDownItem: PropTypes.func.isRequired,\n};\n\nAuthorList.defaultProps = {\n  chosenItemIndex: null,\n  authors: null,\n};\n","import { connect } from 'react-redux';\nimport { AuthorList } from './AuthorList';\nimport {\n  loadItems,\n  moveDownItem,\n  moveUpItem,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    authors: state.authors,\n    chosenItemIndex: state.chosenItemIndex,\n    requested: state.requested,\n    loadedClothes: state.loadedClothes,\n    isEditItemNow: state.isEditItemNow,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadItems: () => dispatch(loadItems()),\n    moveUpItem: () => dispatch(moveUpItem()),\n    moveDownItem: () => dispatch(moveDownItem()),\n  };\n}\n\nconst AuthorListHandler = connect(\n  mapStateToProps, mapDispatchToProps\n)(AuthorList);\n\nexport default AuthorListHandler;\n","import React from 'react';\nimport './App.css';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './redux/reducer';\nimport AuthorListHandler from './components/AuthorListHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthorListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}