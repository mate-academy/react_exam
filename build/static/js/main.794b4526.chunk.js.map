{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/Author.js","Components/AuthorHandler.js","Components/AuthorsList.js","Components/AuthorsListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_DATA","FILL_DATA","REMOVE_AUTHOR","CLICK_EDIT","EDIT_AUTHOR","CLICK_REPLACE","REPLACE_AUTHOR","EXIT_FROM_EDITING","load","dispatch","type","fetch","then","res","json","authors","data","initialState","requested","index","edit","move","Author","props","edition","moving","author","id","removeAuthor","clickEdit","editAuthor","clickReplace","replaceAuthor","react_default","a","createElement","className","onKeyDown","event","key","target","value","autoFocus","placeholder","href","onClick","AuthorHandler","connect","state","ownProps","name","inputValue","newPosition","AuthorsList","dataRequested","buttonClicked","exitFromEditing","closest","map","Components_AuthorHandler","AuthorsListHandler","store","createStore","arguments","length","undefined","action","Object","objectSpread","clonedData","toConsumableArray","splice","clonedData2","currentAuthor","applyMiddleware","thunk","App","es","Components_AuthorsListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAAaA,EAAY,YACZC,EAAY,YACZC,EAAgB,gBAChBC,EAAa,aACbC,EAAc,cACdC,EAAgB,gBAChBC,EAAiB,iBACjBC,EAAoB,oBAE1B,SAASC,IACd,OAAO,SAAAC,GACLA,EAAS,CACLC,KAAMV,IAGVW,MAAM,yEACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLN,EAMG,CACLC,KAAMT,EACNe,KARoBD,OCTxB,IAAME,EAAe,CACnBC,WAAW,EACXF,KAAM,KACNG,MAAO,KACPC,MAAM,EACNC,MAAM,qBCsCOC,MAjDf,SAAgBC,GAAO,IACbC,EASkBD,EATlBC,QACAC,EAQkBF,EARlBE,OACAN,EAOkBI,EAPlBJ,MACAO,EAMkBH,EANlBG,OACAC,EAKkBJ,EALlBI,GACAC,EAIkBL,EAJlBK,aACAC,EAGkBN,EAHlBM,UACAC,EAEkBP,EAFlBO,WACAC,EACkBR,EADlBQ,aACAC,EAAkBT,EAAlBS,cAER,GAAGb,IAAUQ,EAAI,CACf,GAAIH,EACF,OACES,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,YAAOR,EAAK,EAAZ,KAAiBD,GACjBO,EAAAC,EAAAC,cAAA,SACEE,UAAW,SAACC,GAA6B,UAAdA,EAAMC,KAAyBT,EAAWQ,EAAME,OAAOC,QAClFC,WAAS,EAACC,YAAY,aAExBV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAAS,kBAAMjB,EAAaD,KAAxC,MAIN,GAAIF,EACF,OACEQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,YAAOR,EAAK,EAAZ,KAAiBD,GACjBO,EAAAC,EAAAC,cAAA,SACEE,UAAW,SAACC,GAA6B,UAAdA,EAAMC,KAAyBP,EAAcM,EAAME,OAAOC,QACrFC,WAAS,EAACC,YAAY,iBAExBV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAAS,kBAAMjB,EAAaD,KAAxC,MAMR,OACEM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,YAAOR,EAAK,EAAZ,KAAiBD,GACjBO,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAAS,kBAAMhB,EAAUF,KAArC,QACAM,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAAS,kBAAMd,EAAaJ,KAAxC,WACAM,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAAS,kBAAMjB,EAAaD,KAAxC,OCnBN,IAEemB,EAFOC,YApBtB,SAAyBC,EAAOC,GAC9B,MAAO,CACLzB,QAASwB,EAAM5B,KACfK,OAAQuB,EAAM3B,KACdF,MAAO6B,EAAM7B,MACb+B,KAAMD,EAASvB,OACfC,GAAIsB,EAAS9B,QAIjB,SAA4BV,GAC1B,MAAO,CACLmB,aAAc,SAACT,GAAD,OAAWV,EHUtB,SAAsBU,GAC3B,MAAO,CACLT,KAAMR,EACNiB,SGbkCS,CAAaT,KAC/CU,UAAW,SAACF,GAAD,OAAQlB,EHgBhB,SAAmBkB,GACxB,MAAO,CACLjB,KAAMP,EACNwB,MGnB4BE,CAAUF,KACtCG,WAAY,SAACqB,GAAD,OAAgB1C,EHsBzB,SAAoB0C,GACzB,MAAO,CACLzC,KAAMN,EACN+C,cGzBqCrB,CAAWqB,KAChDpB,aAAc,SAACJ,GAAD,OAAQlB,EH4BnB,SAAsBkB,GAC3B,MAAO,CACLjB,KAAML,EACNsB,MG/B+BI,CAAaJ,KAC5CK,cAAe,SAACoB,GAAD,OAAiB3C,EHkC7B,SAAuB2C,GAC5B,MAAO,CACL1C,KAAMJ,EACN8C,eGrCyCpB,CAAcoB,OAIrCL,CAA6CzB,GCCpD+B,MA1Bf,SAAqB9B,GAAO,IAClB+B,EAGoB/B,EAHpB+B,cACAvC,EAEoBQ,EAFpBR,QACAwC,EACoBhC,EADpBgC,cACAC,EAAoBjC,EAApBiC,gBAER,OAAKF,EAGa,OAAZvC,EACKkB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,cAGLH,EAAAC,EAAAC,cAAA,WAASU,QAAS,SAACP,GAAgBA,EAAME,OAAOiB,QAAQ,MAAMD,MAC5DvB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXrB,EAAQ2C,IAAI,SAAChC,EAAQP,GACpB,OAAOc,EAAAC,EAAAC,cAACwB,EAAD,CAAejC,OAAQA,EAAQP,MAAOA,EAAOoB,IAAKb,QAV5DO,EAAAC,EAAAC,cAAA,UAAQU,QAASU,EAAenB,UAAU,QAA1C,iBCQX,IAEewB,EAFYb,YAd3B,SAAyBC,GACvB,MAAO,CACLM,cAAeN,EAAM9B,UACrBH,QAASiC,EAAMhC,OAInB,SAA4BP,GAC1B,MAAO,CACL8C,cAAe,kBAAM9C,EAASD,MAC9BgD,gBAAiB,kBAAM/C,ELoDlB,CACLC,KAAMH,OKjDiBwC,CAA6CM,GCVlEQ,EAAQC,YLSP,WAAoD,IAA9Bd,EAA8Be,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB9C,EAAciD,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQC,EAAOxD,MACb,KAAKV,EACH,OAAOmE,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEE9B,WAAW,IAEf,KAAKjB,EACH,OAAOkE,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEhC,KAAMkD,EAAOlD,OAEjB,KAAKd,EACH,IAAMmE,EAAUF,OAAAG,EAAA,EAAAH,CAAOnB,EAAMhC,MAG7B,OAFAqD,EAAWE,OAAOL,EAAO/C,MAAO,GAEzBgD,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEhC,KAAMqD,EACNlD,MAAO,KACPC,MAAM,EACNC,MAAM,IAEV,KAAKlB,EACH,OAAOgE,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEE7B,MAAO+C,EAAOvC,GACdP,MAAM,IAEV,KAAKhB,EACH,OAAO+D,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEhC,KAAMgC,EAAMhC,KAAK0C,IAAI,SAAChC,EAAQP,GAC5B,OAAIA,IAAU6B,EAAM7B,MAAcO,EAC3BwC,EAAOf,aAEhB/B,MAAM,IAEV,KAAKf,EACH,OAAO8D,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEE7B,MAAO+C,EAAOvC,GACdN,MAAM,IAEV,KAAKf,EACH,IAAMkE,EAAWL,OAAAG,EAAA,EAAAH,CAAOnB,EAAMhC,MACxByD,EAAgBD,EAAYD,OAAOvB,EAAM7B,MAAO,GAEtD,OADAqD,EAAYD,OAAOL,EAAOd,YAAc,EAAG,EAAGqB,EAAc,IACrDN,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEhC,KAAMwD,EACNnD,MAAM,IAEV,KAAKd,EACH,OAAO4D,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEE7B,MAAO,KACPE,MAAM,EACND,MAAK,IAET,QACE,OAAO4B,IKtE2B0B,YAAgBC,MAUzCC,MARf,WACE,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUhB,MAAOA,GACf5B,EAAAC,EAAAC,cAAC2C,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAACgF,GAClCA,EAAaC","file":"static/js/main.794b4526.chunk.js","sourcesContent":["export const LOAD_DATA = 'load_data';\nexport const FILL_DATA = 'fill_data';\nexport const REMOVE_AUTHOR = 'remove_author';\nexport const CLICK_EDIT = 'click_edit';\nexport const EDIT_AUTHOR = 'edit_author';\nexport const CLICK_REPLACE = 'click_replace';\nexport const REPLACE_AUTHOR = 'replace_author';\nexport const EXIT_FROM_EDITING = 'exit_from_editing';\n\nexport function load() {\n  return dispatch => {\n    dispatch({\n        type: LOAD_DATA\n    });\n\n    fetch('http://my-json-server.typicode.com/mate-academy/literary-blog/authors')\n    .then(res => res.json())\n    .then((authors) => {\n      dispatch(fillData(authors));\n    })\n  }\n}\n\nexport function fillData(data) {\n  return {\n    type: FILL_DATA,\n    data\n  }\n}\n\nexport function removeAuthor(index) {\n  return {\n    type: REMOVE_AUTHOR,\n    index\n  }\n}\n\nexport function clickEdit(id) {\n  return {\n    type: CLICK_EDIT,\n    id\n  }\n}\n\nexport function editAuthor(inputValue) {\n  return {\n    type: EDIT_AUTHOR,\n    inputValue\n  }\n}\n\nexport function clickReplace(id) {\n  return {\n    type: CLICK_REPLACE,\n    id\n  }\n}\n\nexport function replaceAuthor(newPosition) {\n  return {\n    type: REPLACE_AUTHOR,\n    newPosition\n  }\n}\n\nexport function exitFromEditing() {\n  return {\n    type: EXIT_FROM_EDITING\n  }\n}\n","import { LOAD_DATA,\n         FILL_DATA,\n         REMOVE_AUTHOR,\n         CLICK_EDIT,\n         EDIT_AUTHOR,\n         CLICK_REPLACE,\n         REPLACE_AUTHOR,\n         EXIT_FROM_EDITING } from \"./actions\";\n\nconst initialState = {\n  requested: false,\n  data: null,\n  index: null,\n  edit: false,\n  move: false\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_DATA:\n      return {\n        ...state,\n        requested: true\n      };\n    case FILL_DATA:\n      return {\n        ...state,\n        data: action.data,\n      }\n    case REMOVE_AUTHOR:\n      const clonedData = [...state.data];\n      clonedData.splice(action.index, 1);\n\n      return {\n        ...state,\n        data: clonedData,\n        index: null,\n        edit: false,\n        move: false\n      }\n    case CLICK_EDIT:\n      return {\n        ...state,\n        index: action.id,\n        edit: true\n      }\n    case EDIT_AUTHOR:\n      return {\n        ...state,\n        data: state.data.map((author, index) => {\n          if (index !== state.index) return author;\n          return action.inputValue;\n        }),\n        edit: false\n      }\n    case CLICK_REPLACE:\n      return {\n        ...state,\n        index: action.id,\n        move: true\n      }\n    case REPLACE_AUTHOR:\n      const clonedData2 = [...state.data];\n      const currentAuthor = clonedData2.splice(state.index, 1);\n      clonedData2.splice(action.newPosition - 1, 0, currentAuthor[0]);\n      return {\n        ...state,\n        data: clonedData2,\n        move: false\n      }\n    case EXIT_FROM_EDITING:\n      return {\n        ...state,\n        index: null,\n        move: false,\n        edit:false\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './Author.css';\n\nfunction Author(props) {\n  const { edition,\n          moving,\n          index,\n          author,\n          id,\n          removeAuthor,\n          clickEdit,\n          editAuthor,\n          clickReplace,\n          replaceAuthor } = props;\n\n  if(index === id) {\n    if (edition) {\n      return (\n        <li className=\"author\">\n          <span>{id + 1}. {author}</span>\n          <input\n            onKeyDown={(event) => {if (event.key !== 'Enter') return; editAuthor(event.target.value)}}\n            autoFocus placeholder=\"New name\"\n          />\n          <a href=\"#\" onClick={() => removeAuthor(id)}>X</a>\n        </li>\n      )\n    }\n    if (moving) {\n      return (\n        <li className=\"author\">\n          <span>{id + 1}. {author}</span>\n          <input\n            onKeyDown={(event) => {if (event.key !== 'Enter') return; replaceAuthor(event.target.value)}}\n            autoFocus placeholder=\"New position\"\n          />\n          <a href=\"#\" onClick={() => removeAuthor(id)}>X</a>\n        </li>\n      )\n    }\n  }\n\n  return (\n    <li className=\"author\">\n      <span>{id + 1}. {author}</span>\n      <a href=\"#\" onClick={() => clickEdit(id)}>Edit</a>\n      <a href=\"#\" onClick={() => clickReplace(id)}>Replace</a>\n      <a href=\"#\" onClick={() => removeAuthor(id)}>X</a>\n    </li>\n  )\n}\n\nexport default Author;\n","import { connect } from 'react-redux';\nimport { removeAuthor,\n         clickEdit,\n         editAuthor,\n         clickReplace,\n         replaceAuthor } from '../redux/actions';\nimport Author from './Author';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    edition: state.edit,\n    moving: state.move,\n    index: state.index,\n    name: ownProps.author,\n    id: ownProps.index\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeAuthor: (index) => dispatch(removeAuthor(index)),\n    clickEdit: (id) => dispatch(clickEdit(id)),\n    editAuthor: (inputValue) => dispatch(editAuthor(inputValue)),\n    clickReplace: (id) => dispatch(clickReplace(id)),\n    replaceAuthor: (newPosition) => dispatch(replaceAuthor(newPosition))\n  }\n}\n\nconst AuthorHandler = connect(mapStateToProps, mapDispatchToProps)(Author);\n\nexport default AuthorHandler;\n","import React from 'react';\nimport AuthorHandler from './AuthorHandler';\n\nfunction AuthorsList(props) {\n  const { dataRequested,\n          authors,\n          buttonClicked,\n          exitFromEditing } = props;\n\n  if (!dataRequested){\n    return <button onClick={buttonClicked} className=\"load\">Load authors</button>;\n  } else {\n    if (authors === null) {\n      return <span className=\"loading\">Loading...</span>;\n    } else {\n      return (\n        <section onClick={(event) => {if (!event.target.closest('a')) exitFromEditing()}}>\n          <h2>Authors:</h2>\n          <ol className=\"list\">\n            {authors.map((author, index) => {\n              return <AuthorHandler author={author} index={index} key={author} />\n            })}\n          </ol>\n        </section>\n      );\n    }\n  }\n}\n\nexport default AuthorsList;\n","import { connect } from 'react-redux';\nimport { load, exitFromEditing } from '../redux/actions';\nimport AuthorsList from './AuthorsList';\n\nfunction mapStateToProps(state) {\n  return {\n    dataRequested: state.requested,\n    authors: state.data\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClicked: () => dispatch(load()),\n    exitFromEditing: () => dispatch(exitFromEditing())\n  }\n}\n\nconst AuthorsListHandler = connect(mapStateToProps, mapDispatchToProps)(AuthorsList);\n\nexport default AuthorsListHandler;\n","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport { getNextState } from './redux/reducers';\nimport thunk from 'redux-thunk';\nimport AuthorsListHandler from './Components/AuthorsListHandler';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthorsListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}