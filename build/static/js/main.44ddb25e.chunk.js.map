{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/Authors.js","components/AuthorsHandler.js","App.js","serviceWorker.js","index.js"],"names":["REMOVE_ITEM","LOAD","DISPLAY","SELECT_ITEM","MOVE_UP","MOVE_DOWN","load","dispatch","type","xhr","XMLHttpRequest","open","responseType","addEventListener","listOfAuthors","response","authorList","send","initialState","requested","selectedItem","Authors","props","authorRequested","author","buttonClicked","buttonUp","buttonDown","selected","remove","react_default","a","createElement","Fragment","map","item","index","className","onClick","href","AuthorsHandler","connect","state","payload","selectItem","store","createStore","selectedAuthor","arguments","length","undefined","action","Object","objectSpread","splice","applyMiddleware","thunk","App","es","components_AuthorsHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44ddb25e.chunk.js","sourcesContent":["export const EDIT_ITEM = 'edit';\nexport const REMOVE_ITEM = 'delete';\nexport const LOAD = 'load';\nexport const DISPLAY = 'display';\nexport const SELECT_ITEM = 'select_item';\nexport const CLEAR_SELECTION = 'clear_selection';\nexport const MOVE_UP = 'move_up';\nexport const MOVE_DOWN = 'move_down';\n\nexport function editItem(index) {\n  return {\n    type: EDIT_ITEM,\n    payload: index,\n  };\n}\n\nexport function removeItem(index) {\n  return {\n    type: REMOVE_ITEM,\n    payload: index,\n  };\n}\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD,\n    });\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors');\n    xhr.responseType = 'json';\n    xhr.addEventListener('load', () => {\n      const listOfAuthors = xhr.response;\n      dispatch(display(listOfAuthors));\n    });\n    xhr.send();\n  };\n}\n\nexport function display(list) {\n  return {\n    type: DISPLAY,\n    authorList: list,\n  };\n}\n\nexport function selectItem(index) {\n  return {\n    type: SELECT_ITEM,\n    payload: index,\n  };\n}\n\nexport function moveUp(index) {\n  return {\n    type: MOVE_UP,\n  };\n}\n\nexport function moveDown(index) {\n  return {\n    type: MOVE_DOWN,\n  };\n}\n","import {\n  DISPLAY, LOAD, MOVE_DOWN, MOVE_UP, REMOVE_ITEM, SELECT_ITEM,\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  authorList: null,\n  selectedItem: null,\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const reducer = (state = initialState, action) => {\n  let selectedAuthor;\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        authorList: action.authorList,\n      };\n    case SELECT_ITEM:\n      return {\n        ...state,\n        selectedItem: action.payload,\n      };\n    case MOVE_UP:\n      selectedAuthor = state.authorList.splice(action.selectedItem, 1);\n      state.authorList.splice(action.selectedItem - 1, 0, selectedAuthor[0]);\n      return {\n        ...state,\n        authorList: state.authorList,\n        selectedItem: action.selectedItem - 1,\n      };\n    case MOVE_DOWN:\n      selectedAuthor = state.authorList.splice(action.selectedItem, 1);\n      state.authorList.splice(action.selectedItem + 1, 0, selectedAuthor[0]);\n      return {\n        ...state,\n        authorList: state.authorList,\n        selectedItem: action.selectedItem + 1,\n      };\n    case REMOVE_ITEM:\n      state.authorList.splice(action.selectedItem, 1);\n      return {\n        ...state,\n        authorList: state.authorList,\n        selectedItem: action.selectedItem - 1,\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Authors(props) {\n  const {\n    authorRequested, author, buttonClicked, buttonUp, buttonDown, selected, selectedItem, remove,\n  } = props;\n\n  if (!authorRequested) {\n    return <button type=\"button\" onClick={buttonClicked}>Load</button>;\n  } if (author === null) {\n    return <span>Loading...</span>;\n  }\n\n  return (\n    <>\n      <ul>\n        {author.map((item, index) => (\n          // eslint-disable-next-line max-len\n          // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions\n          <li\n            className={index === selectedItem ? 'active' : null}\n            onClick={() => selected(index)}\n          >\n            {item}\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n            <a href=\"#\" onClick={remove}>x</a>\n          </li>\n        ))}\n      </ul>\n      <button type=\"button\" onClick={buttonUp}>UP</button>\n      <button type=\"button\" onClick={buttonDown}>DOWN</button>\n    </>\n  );\n}\n\nexport default Authors;\n\nAuthors.propTypes = {\n  authorRequested: PropTypes.bool.isRequired,\n  author: PropTypes.string.isRequired,\n  buttonClicked: PropTypes.func.isRequired,\n  buttonUp: PropTypes.func.isRequired,\n  buttonDown: PropTypes.func.isRequired,\n  selected: PropTypes.func.isRequired,\n  selectedItem: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import { connect } from 'react-redux';\nimport Authors from './Authors';\nimport {\n  load, moveDown, moveUp, removeItem, selectItem,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    authorRequested: state.requested,\n    author: state.authorList,\n    selectedItem: state.selectedItem,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClicked: () => dispatch(load()),\n    buttonUp: () => dispatch(moveUp()),\n    buttonDown: () => dispatch(moveDown()),\n    selected: index => dispatch(selectItem(index)),\n    remove: () => dispatch(removeItem()),\n  };\n}\n\nconst AuthorsHandler = connect(mapStateToProps, mapDispatchToProps)(Authors);\n\nexport default AuthorsHandler;\n","import React from 'react';\nimport './App.css';\nimport './components/Author.css';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './redux/reducers';\nimport AuthorsHandler from './components/AuthorsHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthorsHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}