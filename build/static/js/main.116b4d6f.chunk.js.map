{"version":3,"sources":["reducers/actions.js","reducers/reducer.js","components/Titles.js","components/TitlesHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_ITEMS","DISPLAY_ITEMS","SELECT_ITEM","MOVE_SELECTION_UP","MOVE_SELECTION_DOWN","CLEAR_SELECTION","DELETE_SELECTION","INPUT_NEW_CONTENT","load","dispatch","type","xhr","XMLHttpRequest","open","addEventListener","title","JSON","parse","response","display","send","initialState","requested","selectedIndex","Titles","props","document","getElementsByTagName","articleRequested","react_default","a","createElement","onClick","buttonClicked","list","_loop","i","push","selectItem","key","className","defaultValue","placeholder","onBlur","e","inputNewContent","length","moveSelectionUp","moveSelectionDown","deleteSelection","TitlesHandler","connect","state","itemId","console","log","event","newName","currentTarget","value","newItem","clearSelection","store","createStore","arguments","undefined","action","Object","objectSpread","listAfterMoveUp","toConsumableArray","firstEl_UP","previousEl_UP","splice","listAfterMove_DOWN","firstEl_DOWN","secondEl_DOWN","smallerList","newList","applyMiddleware","thunk","App","es","components_TitlesHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAAaA,EAAY,aACZC,EAAgB,gBAChBC,EAAc,cACdC,EAAoB,oBACpBC,EAAsB,sBACtBC,EAAkB,kBAClBC,EAAmB,mBACnBC,EAAoB,oBAE1B,SAASC,IACd,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMV,IAER,IAAMW,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,yEAChBF,EAAIG,iBAAiB,OAAQ,WAC3B,IAAMC,EAAQC,KAAKC,MAAMN,EAAIO,UAC7BT,EAMC,SAAiBM,GACtB,MAAO,CACLL,KAAMT,EACNc,MAAOA,GATII,CAAQJ,MAEnBJ,EAAIS,QCTR,IAAMC,EAAe,CACnBC,WAAW,EACXP,MAAO,KACPQ,cAAe,wBC8BFC,MA1Cf,SAAgBC,GAMd,GALWC,SAASC,qBAAqB,SAKV,IAA3BF,EAAMG,iBACR,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,QAASP,EAAMQ,eAAvB,QAEP,GAAmB,OAAhBR,EAAMV,MACP,OAAOc,EAAAC,EAAAC,cAAA,0BAGP,IADA,IAAMG,EAAO,GADRC,EAAA,SAEIC,GAGHX,EAAMF,gBAAkBa,EAC1BF,EAAKG,KAAKR,EAAAC,EAAAC,cAAA,MAAIC,QAAS,WAAOP,EAAMa,WAAWF,IACjCG,IAAKd,EAAMV,MAAMqB,GACjBI,UAAU,eACZX,EAAAC,EAAAC,cAAA,SAAOU,aAAchB,EAAMV,MAAMqB,GAC1BM,YAAajB,EAAMV,MAAMqB,GACzBO,OAAQ,SAACC,GAAD,OAAOnB,EAAMoB,gBAAgBD,QAGxDV,EAAKG,KAAKR,EAAAC,EAAAC,cAAA,MAAIC,QAAS,WAAOP,EAAMa,WAAWF,IACjCG,IAAKd,EAAMV,MAAMqB,GACjBI,UAAU,eAAef,EAAMV,MAAMqB,MAd9CA,EAAI,EAAGA,EAAIX,EAAMV,MAAM+B,OAAQV,IAAKD,EAApCC,GAiBT,OAAOP,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACZX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,QAAQN,GACtBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASP,EAAMsB,iBAAvB,WACAlB,EAAAC,EAAAC,cAAA,UAAQC,QAASP,EAAMuB,mBAAvB,cAEFnB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMP,EAAMwB,gBAAgBxB,EAAMF,iBAAnD,iBCNhB,IAEe2B,EAFOC,YApBtB,SAAuBC,GACrB,MAAO,CACLxB,iBAAkBwB,EAAM9B,UACxBP,MAAOqC,EAAMrC,MACbQ,cAAe6B,EAAM7B,gBAIzB,SAA4Bd,GAC1B,MAAO,CACL6B,WAAY,SAACF,GAAD,OAAO3B,GHSI4C,EGTgBjB,EHUzCkB,QAAQC,IAAIF,GACL,CACL3C,KAAMR,EACNmD,YAJG,IAAoBA,GGRvBpB,cAAe,kBAAMxB,EAASD,MAC9ByC,gBAAiB,SAACb,GAAD,OAAO3B,EHkCnB,CACLC,KAAMJ,EACN+C,OGpCiDjB,KACjDS,gBAAiB,SAACW,GAAD,OAAW/C,EHuCzB,SAAyB+C,GAC9B,IAAIC,EAAUD,EAAME,cAAcC,MAClC,MAAO,CACLjD,KAAMH,EACNqD,QAASH,GG3C4BZ,CAAgBW,KACrDT,gBAAiB,kBAAMtC,EHclB,CACLC,KAAMP,KGdN6C,kBAAmB,kBAAMvC,EHmBpB,CACLC,KAAMN,KGnBNyD,eAAgB,kBAAMpD,EHwBjB,CACLC,KAAML,OGrBY8C,CAA2C3B,WCxB3DsC,EAAQC,YHSP,WAAoD,IAA9BX,EAA8BY,UAAAlB,OAAA,QAAAmB,IAAAD,UAAA,GAAAA,UAAA,GAAtB3C,EAAc6C,EAAQF,UAAAlB,OAAA,EAAAkB,UAAA,QAAAC,EACzD,OAAQC,EAAOxD,MACb,KAAKV,EACH,OAAOmE,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEE9B,WAAW,IAEf,KAAKrB,EACH,OAAOkE,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEErC,MAAOmD,EAAOnD,QAElB,KAAKb,EACH,OAAOiE,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEE7B,cAAe2C,EAAOb,SAE1B,KAAKlD,EACH,GAA4B,IAAxBiD,EAAM7B,cACR,OAAO6B,EAET,IAAMiB,EAAeF,OAAAG,EAAA,EAAAH,CAAOf,EAAMrC,OAC9BwD,EAAaF,EAAgBjB,EAAM7B,eACnCiD,EAAgBH,EAAgBjB,EAAM7B,cAAgB,GAG1D,OAFA8C,EAAgBI,OAAOrB,EAAM7B,cAAgB,EAAG,EAAGgD,EAAYC,GAExDL,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEErC,MAAOsD,EACP9C,cAAe6B,EAAM7B,cAAgB,IAEzC,KAAKnB,EACH,GAAIgD,EAAM7B,gBAAkB6B,EAAMrC,MAAM+B,OAAS,EAC/C,OAAOM,EAGT,IAAMsB,EAAkBP,OAAAG,EAAA,EAAAH,CAAOf,EAAMrC,OACjC4D,EAAeD,EAAmBtB,EAAM7B,eACxCqD,EAAgBF,EAAmBtB,EAAM7B,cAAgB,GAG7D,OAFAmD,EAAmBD,OAAOrB,EAAM7B,cAAe,EAAGqD,EAAeD,GAE1DR,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEErC,MAAO2D,EACPnD,cAAe6B,EAAM7B,cAAgB,IAEzC,KAAKlB,EACH,OAAO8D,OAAAC,EAAA,EAAAD,CAAA,GACDf,EADN,CAEE7B,cAAe,OAEnB,KAAKjB,EACH,IAAMuE,EAAczB,EAAMrC,MAE1B,OADA8D,EAAYJ,OAAOP,EAAOb,OAAQ,GAC3Bc,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEErC,MAAO8D,EACPtD,cAAe,OAEnB,KAAKhB,EACH,IAAIuE,EAAU1B,EAAMrC,MAEpB,OADA+D,EAAQL,OAAOrB,EAAM7B,cAAe,EAAG2C,EAAON,SACvCO,OAAAC,EAAA,EAAAD,CAAA,GACFf,EADL,CAEErC,MAAO+D,IAEX,QAAS,OAAO1B,IG3EoB2B,YAAgBC,MAUzCC,MARf,WACE,OACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAUpB,MAAOA,GACfjC,EAAAC,EAAAC,cAACoD,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASjE,SAASkE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.116b4d6f.chunk.js","sourcesContent":["export const LOAD_ITEMS= 'LOAD_ITEMS';\nexport const DISPLAY_ITEMS = 'DISPLAY_ITEMS';\nexport const SELECT_ITEM = 'SELECT_ITEM';\nexport const MOVE_SELECTION_UP = 'MOVE_SELECTION_UP';\nexport const MOVE_SELECTION_DOWN = 'MOVE_SELECTION_DOWN';\nexport const CLEAR_SELECTION = 'CLEAR_SELECTION';\nexport const DELETE_SELECTION = 'DELETE_SELECTION';\nexport const INPUT_NEW_CONTENT = 'INPUT_NEW_CONTENT';\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_ITEMS\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors');\n    xhr.addEventListener('load', () => {\n      const title = JSON.parse(xhr.response);\n      dispatch(display(title));\n    });\n    xhr.send();\n  };\n}\n\nexport function display(title) {\n  return {\n    type: DISPLAY_ITEMS,\n    title: title\n  };\n}\n\nexport function selectItem(itemId) {\n  console.log(itemId);\n  return {\n    type: SELECT_ITEM,\n    itemId\n  };\n}\n\nexport function moveSelectionUp() {\n  return {\n    type: MOVE_SELECTION_UP\n  };\n}\n\nexport function moveSelectionDown() {\n  return {\n    type: MOVE_SELECTION_DOWN\n  };\n}\n\nexport function clearSelection() {\n  return {\n    type: CLEAR_SELECTION\n  }\n}\n\nexport function deleteSelection(itemId) {\n  return {\n    type: DELETE_SELECTION,\n    itemId\n  }\n}\n\nexport function inputNewContent(event) {\n  let newName = event.currentTarget.value;\n  return {\n    type: INPUT_NEW_CONTENT,\n    newItem: newName\n  }\n}\n","import {\n  LOAD_ITEMS,\n  DISPLAY_ITEMS,\n  SELECT_ITEM,\n  MOVE_SELECTION_UP,\n  MOVE_SELECTION_DOWN,\n  CLEAR_SELECTION,\n  DELETE_SELECTION,\n  INPUT_NEW_CONTENT\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  title: null,\n  selectedIndex: null\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_ITEMS:\n      return {\n        ...state,\n        requested: true\n      };\n    case DISPLAY_ITEMS:\n      return {\n        ...state,\n        title: action.title\n      };\n    case SELECT_ITEM:\n      return {\n        ...state,\n        selectedIndex: action.itemId\n      };\n    case MOVE_SELECTION_UP:\n      if (state.selectedIndex === 0) {\n        return state;\n      }\n      const listAfterMoveUp = [...state.title];\n      let firstEl_UP = listAfterMoveUp[state.selectedIndex];\n      let previousEl_UP = listAfterMoveUp[state.selectedIndex - 1];\n      listAfterMoveUp.splice(state.selectedIndex - 1, 2, firstEl_UP, previousEl_UP);\n\n      return {\n        ...state,\n        title: listAfterMoveUp,\n        selectedIndex: state.selectedIndex - 1\n      };\n    case MOVE_SELECTION_DOWN:\n      if (state.selectedIndex === state.title.length - 1) {\n        return state;\n      }\n\n      const listAfterMove_DOWN = [...state.title];\n      let firstEl_DOWN = listAfterMove_DOWN[state.selectedIndex];\n      let secondEl_DOWN = listAfterMove_DOWN[state.selectedIndex + 1];\n      listAfterMove_DOWN.splice(state.selectedIndex, 2, secondEl_DOWN, firstEl_DOWN);\n\n      return {\n        ...state,\n        title: listAfterMove_DOWN,\n        selectedIndex: state.selectedIndex + 1\n      };\n    case CLEAR_SELECTION:\n      return {\n         ...state,\n        selectedIndex: null\n      };\n    case DELETE_SELECTION:\n      const smallerList = state.title;\n      smallerList.splice(action.itemId, 1);\n      return {\n        ...state,\n        title: smallerList,\n        selectedIndex: null\n      };\n    case INPUT_NEW_CONTENT:\n      let newList = state.title;\n      newList.splice(state.selectedIndex, 1, action.newItem);\n      return {\n        ...state,\n        title: newList\n      };\n    default: return state;\n  }\n}\n","import React from 'react';\n\nfunction Titles(props) {\n  let body = document.getElementsByTagName('body');\n  // body[0].addEventListener('click', () => {\n  //   props.clearSelection();\n  // });\n\n  if (props.articleRequested === false) {\n    return <button onClick={props.buttonClicked}>Load</button>\n  } else {\n    if(props.title === null) {\n      return <span>Loading...</span>;\n    } else {\n      const list = [];\n      for (let i = 0; i < props.title.length; i++) {\n        //console.log(props.title[i]);\n        //console.log(props.selectedIndex);\n        if (props.selectedIndex === i) {\n          list.push(<li onClick={() => {props.selectItem(i)}}\n                        key={props.title[i]}\n                        className=\"listElement\">\n                      <input defaultValue={props.title[i]}\n                             placeholder={props.title[i]}\n                             onBlur={(e) => props.inputNewContent(e)}/>\n                    </li>);\n        } else {\n          list.push(<li onClick={() => {props.selectItem(i)}}\n                        key={props.title[i]}\n                        className=\"listElement\">{props.title[i]}</li>);\n        }\n      }\n      return <div className=\"boxForList\">\n                <ul className=\"list\">{list}</ul>\n                <div>\n                  <button onClick={props.moveSelectionUp}>Move up</button>\n                  <button onClick={props.moveSelectionDown}>Move down</button>\n                </div>\n                <button onClick={() => props.deleteSelection(props.selectedIndex)}>Delete item</button>\n             </div>;\n    }\n  }\n}\n\nexport default Titles;\n","import Titles from './Titles';\nimport {connect} from 'react-redux';\nimport {\n  load,\n  selectItem,\n  deleteSelection,\n  inputNewContent,\n  moveSelectionUp,\n  moveSelectionDown,\n  clearSelection\n} from '../reducers/actions';\n\nfunction mapStateProps(state) {\n  return {\n    articleRequested: state.requested,\n    title: state.title,\n    selectedIndex: state.selectedIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    selectItem: (i) => dispatch(selectItem(i)),\n    buttonClicked: () => dispatch(load()),\n    deleteSelection: (i) => dispatch(deleteSelection(i)),\n    inputNewContent: (event) => dispatch(inputNewContent(event)),\n    moveSelectionUp: () => dispatch(moveSelectionUp()),\n    moveSelectionDown: () => dispatch(moveSelectionDown()),\n    clearSelection: () => dispatch(clearSelection())\n  };\n}\n\nconst TitlesHandler = connect(mapStateProps, mapDispatchToProps)(Titles);\n\nexport default TitlesHandler;\n","import React from 'react';\nimport './App.css';\nimport {getNextState} from './reducers/reducer';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport TitlesHandler from \"./components/TitlesHandler\";\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TitlesHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}