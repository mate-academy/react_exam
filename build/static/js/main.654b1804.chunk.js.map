{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/Author.js","components/AuthorList.js","components/AuthorListHandler.js","App.js","serviceWorker.js","index.js"],"names":["REMOVE_ITEM","LOAD_DATA","DISPLAY_BUTTONS","DISPLAY_REQUEST","MOVE_UP","MOVE_DOWN","EDIT","ADD_INPUT_VALUE","SAVE_NEW_NAME","CHANGE_CLASS_NAME","loadData","dispatch","type","request","XMLHttpRequest","open","addEventListener","finalData","JSON","parse","response","map","item","displayClass","input","data","send","initialState","items","requested","Author","props","react_default","a","createElement","className","concat","onClick","changeClass","index","authorName","value","inputValue","onChange","e","updateInput","target","save","class","moveUp","disabled","moveDown","length","removeItem","AuthorList","list","components_Author","key","displayButtons","edit","AuthorListHandler","connect","state","dicplayClass","editItems","dispayButtons","addInputValue","saveNewName","changeClassName","store","createStore","arguments","undefined","action","Object","objectSpread","filter","newItemsUp","toConsumableArray","elemUp","splice","newItemsDown","elemDown","newStateItems","newItems","focus","newItemsChange","applyMiddleware","thunk","App","es","components_AuthorListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.654b1804.chunk.js","sourcesContent":["export const REMOVE_ITEM = 'remove_item';\r\nexport const LOAD_DATA = 'load_data';\r\nexport const DISPLAY_BUTTONS = 'display_buttons';\r\nexport const DISPLAY_REQUEST = 'display_request';\r\nexport const MOVE_UP = 'move_up';\r\nexport const MOVE_DOWN = 'move_down';\r\nexport const EDIT = 'edit';\r\nexport const ADD_INPUT_VALUE = 'add_input_value';\r\nexport const SAVE_NEW_NAME = 'save_new_name';\r\nexport const CHANGE_CLASS_NAME = 'change_class_name';\r\n\r\nexport function removeItem(index) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    index\r\n  }\r\n}\r\n\r\nexport function loadData() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD_DATA\r\n    });\r\n        \r\n    const request = new XMLHttpRequest();\r\n    request.open('GET', ` http://my-json-server.typicode.com/mate-academy/literary-blog/authors`);\r\n    request.addEventListener('load', () => {\r\n      const items = JSON.parse(request.response);\r\n      const finalData = items.map(item => {\r\n        return {\r\n          item: item,\r\n          displayClass: 'none_active',\r\n          input: item,\r\n        }\r\n      });\r\n        \r\n          dispatch(displayRequest(finalData));\r\n      });\r\n      request.send();\r\n  }\r\n}\r\n\r\nexport function displayButtons(index) {\r\n  return {\r\n    type: DISPLAY_BUTTONS,\r\n    index\r\n  }\r\n}\r\n\r\nexport function displayRequest(data) {\r\n  return {\r\n    type: DISPLAY_REQUEST,\r\n    data\r\n  }\r\n}\r\n\r\nexport function moveUp(index) {\r\n  return {\r\n    type: MOVE_UP,\r\n    index\r\n  }\r\n}\r\n\r\nexport function moveDown(index) {\r\n  return {\r\n    type: MOVE_DOWN,\r\n    index\r\n  }\r\n}\r\n\r\nexport function edit(index) {\r\n  return {\r\n    type: EDIT,\r\n    index\r\n  }\r\n}\r\n\r\nexport function addInputValue(value, index) {\r\n  return {\r\n    type: ADD_INPUT_VALUE,\r\n    value,\r\n    index\r\n  }\r\n}\r\n\r\nexport function saveNewName(index) {\r\n  return {\r\n    type: SAVE_NEW_NAME,\r\n    index\r\n  }\r\n}\r\n\r\nexport function changeClassName(index) {\r\n  return {\r\n    type: CHANGE_CLASS_NAME,\r\n    index\r\n  }\r\n}\r\n","import {REMOVE_ITEM, LOAD_DATA, DISPLAY_REQUEST, MOVE_UP, MOVE_DOWN, EDIT, ADD_INPUT_VALUE, SAVE_NEW_NAME, CHANGE_CLASS_NAME} from './actions'\r\n\r\nconst initialState = {\r\n  items: null,\r\n  requested: false\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item, index) => action.index !== index)\r\n      };\r\n    case LOAD_DATA: \r\n      return {\r\n      ...state,\r\n        requested: true\r\n    }\r\n    case DISPLAY_REQUEST:\r\n      return {\r\n        ...state,\r\n        items: action.data,\r\n      };\r\n    case MOVE_UP:\r\n      const newItemsUp = [...state.items];\r\n      const elemUp = newItemsUp.splice(action.index, 1);\r\n      newItemsUp.splice(action.index -1, 0, elemUp[0]);\r\n      return {\r\n        ...state,\r\n        items: newItemsUp\r\n      };\r\n      case MOVE_DOWN:\r\n          const newItemsDown = [...state.items];\r\n          const elemDown = newItemsDown.splice(action.index, 1);\r\n          newItemsDown.splice(action.index + 1, 0, elemDown[0]);\r\n          return {\r\n            ...state,\r\n            items: newItemsDown\r\n          };\r\n      \r\n      case ADD_INPUT_VALUE:\r\n        const newStateItems = state.items.map((item, index) => {\r\n          if(index === action.index) {\r\n            return {\r\n             ... item,\r\n              input: action.value\r\n            } \r\n          } else {\r\n            return item\r\n          }\r\n        });\r\n        return {\r\n          ...state,\r\n          items: newStateItems\r\n      }\r\n      case SAVE_NEW_NAME:\r\n        const newItems = state.items.map((item, index) => {\r\n          if (index === action.index && item.input) {\r\n            return {\r\n               item: item.input,\r\n               displayClass: 'none_active',\r\n               input: item.input,\r\n               focus: true\r\n             } \r\n          } else {\r\n            return {\r\n              ...item,\r\n              displayClass: 'none_active'\r\n            }\r\n          }\r\n        });\r\n        return {\r\n          ...state,\r\n          items: newItems\r\n      }\r\n    case CHANGE_CLASS_NAME:\r\n      const newItemsChange = state.items.map((item, index) => {\r\n        if(index === action.index) {\r\n          return {\r\n            ...item,\r\n            displayClass: item.displayClass === 'active' ? 'none_active' : 'active'\r\n          }\r\n        } else {\r\n          return {\r\n            ...item,\r\n            displayClass: 'none_active'\r\n          }\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        items: newItemsChange\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../css/Author.css'\r\n\r\nfunction Author(props) {\r\n  return (\r\n    <li>\r\n      <span className={`author_name ${props.displayClass === 'active' ? 'none_active': 'active'}`} onClick={() => props.changeClass(props.index)}>{props.authorName}</span>\r\n      <span className={`edit ${props.displayClass}`}>\r\n        <input type='text' value={props.inputValue} onChange={(e) => props.updateInput(e.target.value, props.index)}></input>\r\n        <button onClick={() => props.save(props.index)}>save</button> \r\n      </span>\r\n      <span className={props.class}>\r\n        <button onClick = {() => props.moveUp(props.index)} disabled={props.index === 0 ? true: false}>&#8743;</button>\r\n        <button onClick = {() => props.moveDown(props.index)} disabled={props.index === props.items.length - 1 ? true: false}>&#8744;</button>\r\n      <span className='remove' onClick = {() => props.removeItem(props.index)}>x</span>\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Author;\r\n","import React from 'react';\r\nimport Author from './Author'\r\n\r\nfunction AuthorList(props) {\r\n  if(props.requested) {\r\n    if(props.items) {\r\n      const list = props.items.map((item, index) => {\r\n        return <Author key={index}\r\n          items={props.items}\r\n          authorName={item.item}\r\n          index={index}\r\n          displayButtons={props.displayButtons}\r\n          removeItem={props.removeItem}\r\n          moveUp={props.moveUp}\r\n          moveDown={props.moveDown}\r\n          edit={props.edit}\r\n          updateInput={props.updateInput}\r\n          inputValue={item.input}\r\n          save={props.save}\r\n          displayClass={item.displayClass}\r\n          changeClass={props.changeClass}\r\n          />\r\n      });\r\n      return (\r\n        <ol>\r\n          {list}\r\n        </ol>\r\n      );\r\n    } else {\r\n      return <div>Loading...</div>\r\n    }\r\n  } else {\r\n    return <button onClick={props.loadData}>Load</button>\r\n  }\r\n}\r\n\r\nexport default AuthorList;\r\n","import {connect} from 'react-redux';\r\nimport {displayButtons, loadData, removeItem, moveUp, moveDown, edit, addInputValue, saveNewName, changeClassName} from '../redux/actions';\r\nimport AuthorList from './AuthorList';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    items: state.items,\r\n    displayClass: state.dicplayClass,\r\n    editItems: state.editItems,\r\n    requested: state.requested,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    dispayButtons: () =>  dispatch(displayButtons()),\r\n    loadData: () => dispatch(loadData()),\r\n    removeItem: (index) => dispatch(removeItem(index)),\r\n    moveUp: (index) => dispatch(moveUp(index)),\r\n    moveDown: (index) => dispatch(moveDown(index)),\r\n    edit: (index) => dispatch(edit(index)),\r\n    updateInput: (value, index) => dispatch(addInputValue(value, index)),\r\n    save: (index) => dispatch(saveNewName(index)),\r\n    changeClass: (index) => dispatch(changeClassName(index))\r\n  }\r\n}\r\n\r\nconst AuthorListHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AuthorList);\r\n\r\nexport default AuthorListHandler;\r\n","import React from 'react';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport {reducer} from './redux/reducers';\r\nimport {Provider} from 'react-redux';\r\nimport AuthorListHandler from './components/AuthorListHandler';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <AuthorListHandler/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}