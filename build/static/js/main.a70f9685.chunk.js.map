{"version":3,"sources":["Components/AuthorsList.js","redux/actions.js","Components/ListHandler.js","redux/reducers.js","App.js","serviceWorker.js","index.js"],"names":["AuthorsList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveAuthorDown","bind","assertThisInitialized","moveAuthorUp","editAuthor","removeAuthor","selectAuthor","loadList","removeSelection","load","moveDown","moveUp","index","deleteItem","selectItem","clearSelection","event","editing","refs","input","value","selected","console","log","_this2","requested","authors","react_default","a","createElement","onClick","className","map","item","key","href","ref","onChange","defaultValue","Component","LOAD","DISPLAY","EDIT_LAUNCH","DELETE","MOVE_UP","MOVE_DOWN","SELECT_ITEM","CLEAR_SELECT","EDIT_IN_PROGRESS","dispatch","type","xhr","XMLHttpRequest","open","responseType","addEventListener","authorList","response","send","ListHandler","connect","state","inputValue","editProgress","AuthorList","initialState","edited","store","createStore","arguments","length","undefined","action","objectSpread","filter","indexOf","newList","toConsumableArray","splice","moveItemUp","moveItemDown","applyMiddleware","thunk","App","es","Components_ListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a70f9685.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// import Author from './Author';\n\nclass AuthorsList extends Component {\n  constructor(props) {\n    super(props);\n    this.moveAuthorDown = this.moveAuthorDown.bind(this);\n    this.moveAuthorUp = this.moveAuthorUp.bind(this);\n    this.editAuthor = this.editAuthor.bind(this);\n    this.removeAuthor = this.removeAuthor.bind(this);\n    this.selectAuthor = this.selectAuthor.bind(this);\n    this.loadList = this.loadList.bind(this);\n    this.removeSelection = this.removeSelection.bind(this);\n  }\n\n  loadList() {\n    this.props.load();\n  }\n\n  moveAuthorDown() {\n    this.props.moveDown();\n  }\n\n  moveAuthorUp() {\n    this.props.moveUp();\n  }\n\n  removeAuthor(index) {\n    this.props.deleteItem(index);\n  }\n\n  selectAuthor(index) {\n    this.props.selectItem(index);\n  }\n\n  removeSelection() {\n    this.props.clearSelection()\n  }\n\n  editAuthor(event) {\n    this.props.editing(this.refs.input.value, this.props.selected);\n    console.log(this.refs.input.value)\n  }\n\n  render() {\n    if (!this.props.requested) {\n      return <button onClick={this.loadList}>Load</button>;\n    }\n    if (this.props.authors === null) {\n      return <span>Loading ...</span>;\n    }\n    return (\n      <div>\n        <button onClick={this.moveAuthorUp} className=\"moveUp\">\n          Move up\n        </button>\n        <ul className=\"list\">\n          {this.props.authors.map((item, index) => {\n            if (index !== this.props.selected) {\n                return (\n                  <li onClick={() => this.selectAuthor(index)} className=\"item\" key={item}>\n                  <span >\n                    {item}\n                  </span>\n                    <a href=\"#\" className=\"remove\" onClick={() => this.removeAuthor(index)}>&times;</a>\n                  </li>\n                );\n              }\n              return (\n                <li onClick={() => this.selectAuthor(index)} className=\"item\" key={item}>\n                  {/* eslint-disable-next-line react/no-string-refs */}\n                  <input ref=\"input\" onChange={() => this.editAuthor()} defaultValue={item} />\n                  <a href=\"#\" className=\"remove\" onClick={() => this.removeAuthor(index)}>&times;</a>\n                </li>\n              );\n            })}\n        </ul>\n        <button onClick={this.moveAuthorDown} className=\"moveDown\">\n          Move down\n        </button>\n        <button onClick={this.removeSelection}>\n          Clear selection\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AuthorsList;\n","export const LOAD = 'load';\nexport const DISPLAY = 'display';\nexport const EDIT_LAUNCH = 'edit in progress';\nexport const EDIT_COMPLETED = 'edited';\nexport const DELETE = 'delete';\nexport const MOVE_UP = 'move up';\nexport const MOVE_DOWN = 'move down';\nexport const SELECT_ITEM = 'select item';\nexport const CLEAR_SELECT = 'clear select';\nexport const EDIT_IN_PROGRESS = 'edit in progress';\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD,\n    });\n    const xhr = new XMLHttpRequest();\n    // eslint-disable-next-line max-len\n    xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors');\n    xhr.responseType = 'json';\n    xhr.addEventListener('load', () => {\n      const authorList = xhr.response;\n      dispatch(display(authorList));\n    });\n    xhr.send();\n  };\n}\n\nexport function display(authors) {\n  return {\n    type: DISPLAY,\n    authors,\n  };\n}\n\nexport function deleteItem(index) {\n  return {\n    type: DELETE,\n    index,\n  };\n}\n\nexport function selectItem(index) {\n  return {\n    type: SELECT_ITEM,\n    index,\n  };\n}\n\nexport function clearSelection() {\n  return {\n    type: CLEAR_SELECT,\n  };\n}\n\nexport function moveDown() {\n  return {\n    type: MOVE_DOWN,\n  };\n}\n\nexport function moveUp() {\n  return {\n    type: MOVE_UP,\n  };\n}\n\nexport function startEdit() {\n  return {\n    type: EDIT_LAUNCH,\n  };\n}\n\nexport function editComplete() {\n  return {\n    type: EDIT_COMPLETED,\n  };\n}\n\nexport function editProgress(inputValue, index) {\n  return {\n    type: EDIT_IN_PROGRESS,\n    inputValue,\n    index,\n  };\n}\n","import { connect } from 'react-redux';\nimport AuthorList from './AuthorsList';\nimport {\n  moveDown, moveUp, deleteItem, selectItem,\n  clearSelection, load, editProgress,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    requested: state.requested,\n    authors: state.authors,\n    selected: state.selected,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    load: () => dispatch(load()),\n    moveDown: () => dispatch(moveDown()),\n    moveUp: () => dispatch(moveUp()),\n    deleteItem: index => dispatch(deleteItem(index)),\n    selectItem: index => dispatch(selectItem(index)),\n    clearSelection: () => dispatch(clearSelection()),\n    editing: (inputValue, index) => dispatch(editProgress(inputValue, index)),\n  };\n}\n\nconst ListHandler = connect(mapStateToProps, mapDispatchToProps)(AuthorList);\n\nexport default ListHandler;\n","import {\n  CLEAR_SELECT,\n  DISPLAY,\n  LOAD,\n  MOVE_DOWN,\n  MOVE_UP,\n  SELECT_ITEM,\n  DELETE,\n  EDIT_LAUNCH,\n  EDIT_IN_PROGRESS,\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  authors: null,\n  edited: false,\n  // inputText: '',\n  selected: null,\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        authors: action.authors,\n      };\n    case DELETE:\n      return {\n        ...state,\n        authors: state.authors.filter((item) => {\n          return state.authors.indexOf(item) !== action.index;\n        }),\n      };\n    case SELECT_ITEM:\n      return {\n        ...state,\n        selected: action.index,\n      };\n    case CLEAR_SELECT:\n      return {\n        ...state,\n        selected: null,\n      };\n    case MOVE_UP:\n      return moveItemUp(state);\n    case MOVE_DOWN:\n      return moveItemDown(state);\n    case EDIT_LAUNCH:\n      return {\n        ...state,\n        edited: true,\n      };\n    case EDIT_IN_PROGRESS:\n      return {\n        ...state,\n        authors: state.authors.map((item, index) => {\n          if (index === action.index) {\n            return action.inputValue;\n          }\n          return item;\n        }),\n      };\n    default:\n      return state;\n  }\n}\n\nfunction moveItemDown(state) {\n  const newList = [...state.authors];\n  if (state.selected === newList.length - 1 || state.selected === null) {\n    return state;\n  }\n  const item = newList.splice(state.selected, 1);\n  newList.splice(state.selected + 1, 0, item[0]);\n  return {\n    ...state,\n    authors: newList,\n    selected: state.selected + 1,\n  };\n}\n\nfunction moveItemUp(state) {\n  const newList = [...state.authors];\n  if (state.selected === 0 || state.selected === null) {\n    return state;\n  }\n  const item = newList.splice(state.selected, 1);\n  newList.splice(state.selected - 1, 0, item[0]);\n  return {\n    ...state,\n    authors: newList,\n    selected: state.selected - 1,\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport ListHandler from './Components/ListHandler';\nimport { getNextState } from './redux/reducers';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}